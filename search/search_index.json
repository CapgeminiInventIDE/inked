{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"inked \u00a4 Getting Started \u00a4","title":"Welcome"},{"location":"#inked","text":"","title":"inked"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"about_us/","text":"About Us \u00a4 Capgemini Invent combines strategy, technology, data science and creative design to solve the most complex business and technology challenges. \u00a4 Disruption is not new, but the pace of change is. The fourth industrial revolution is forcing businesses to rethink everything they know. Leading organizations behave as living entities, constantly adapting to change. With invention at their core, they continuously redesign their business to generate new sources of value. Winning is about fostering inventive thinking to create what comes next. Invent. Build. Transform. \u00a4 This is why we have created Capgemini Invent, Capgemini\u2019s new digital innovation, consulting and transformation global business line. Our multi-disciplinary team helps business leaders find new sources of value. We accelerate the process of turning ideas into prototypes and scalable real-world solutions; leveraging the full business and technology expertise of the Capgemini Group to implement at speed and scale. The result is a coordinated approach to transformation, enabling businesses to create the products, services, customer experiences, and business models of the future. We're Hiring! \u00a4 Do you want to be part of the team that builds doc_loader and other great products at Capgemini Invent? If so, you're in luck! Capgemini Invent is currently hiring Data Scientists who love using data to drive their decisions. Take a look at our open positions and see if you're a fit.","title":"About Us"},{"location":"about_us/#about-us","text":"","title":"About Us"},{"location":"about_us/#capgemini-invent-combines-strategy-technology-data-science-and-creative-design-to-solve-the-most-complex-business-and-technology-challenges","text":"Disruption is not new, but the pace of change is. The fourth industrial revolution is forcing businesses to rethink everything they know. Leading organizations behave as living entities, constantly adapting to change. With invention at their core, they continuously redesign their business to generate new sources of value. Winning is about fostering inventive thinking to create what comes next.","title":"Capgemini Invent combines strategy, technology, data science and creative design to solve the most complex business and technology challenges."},{"location":"about_us/#invent-build-transform","text":"This is why we have created Capgemini Invent, Capgemini\u2019s new digital innovation, consulting and transformation global business line. Our multi-disciplinary team helps business leaders find new sources of value. We accelerate the process of turning ideas into prototypes and scalable real-world solutions; leveraging the full business and technology expertise of the Capgemini Group to implement at speed and scale. The result is a coordinated approach to transformation, enabling businesses to create the products, services, customer experiences, and business models of the future.","title":"Invent. Build. Transform."},{"location":"about_us/#were-hiring","text":"Do you want to be part of the team that builds doc_loader and other great products at Capgemini Invent? If so, you're in luck! Capgemini Invent is currently hiring Data Scientists who love using data to drive their decisions. Take a look at our open positions and see if you're a fit.","title":"We're Hiring!"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at andy.challis@capgemini.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at andy.challis@capgemini.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 If you would like to make any contributions to the inked, you may do so by submitting a pull request to the inked repository : Fork the repository Create a branch in your own fork: git checkout -b <branch_name> . Make your changes and commit them: git commit -m '<commit_message>' Push to the original branch: git push origin <project_name>/<location> Create the pull request back to our fork.","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to make any contributions to the inked, you may do so by submitting a pull request to the inked repository : Fork the repository Create a branch in your own fork: git checkout -b <branch_name> . Make your changes and commit them: git commit -m '<commit_message>' Push to the original branch: git push origin <project_name>/<location> Create the pull request back to our fork.","title":"Contributing"},{"location":"license/","text":"Mozilla Public License Version 2.0 \u00a4 Copyright (c) 2021, Capgemini Invent IDE All rights reserved. 1. Definitions \u00a4 1.1. \"Contributor\" means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \"Contributor Version\" means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor's Contribution. 1.3. \"Contribution\" means Covered Software of a particular Contributor. 1.4. \"Covered Software\" means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \"Incompatible With Secondary Licenses\" means (a) that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or (b) that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \"Executable Form\" means any form of the work other than Source Code Form. 1.7. \"Larger Work\" means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \"License\" means this document. 1.9. \"Licensable\" means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \"Modifications\" means any of the following: (a) any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or (b) any new file in Source Code Form that contains any Covered Software. 1.11. \"Patent Claims\" of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \"Secondary License\" means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \"Source Code Form\" means the form of the work preferred for making modifications. 1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising rights under this License. For legal entities, \"You\" includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity. 2. License Grants and Conditions \u00a4 2.1. Grants Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: (a) under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and (b) under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version. 2.2. Effective Date The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution. 2.3. Limitations on Grant Scope The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: (a) for any code that a Contributor has removed from Covered Software; or (b) for infringements caused by: (i) Your and any other third party's modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or (c) under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4). 2.4. Subsequent Licenses No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3). 2.5. Representation Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License. 2.6. Fair Use This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents. 2.7. Conditions Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1. 3. Responsibilities \u00a4 3.1. Distribution of Source Form All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form. 3.2. Distribution of Executable Form If You distribute Covered Software in Executable Form then: (a) such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and (b) You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients' rights in the Source Code Form under this License. 3.3. Distribution of a Larger Work You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s). 3.4. Notices You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies. 3.5. Application of Additional Terms You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction. 4. Inability to Comply Due to Statute or Regulation \u00a4 If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it. 5. Termination \u00a4 5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination. * Disclaimer of Warranty * ------------------------- * * Covered Software is provided under this License on an \"as is\" * basis, without warranty of any kind, either expressed, implied, or * statutory, including, without limitation, warranties that the * Covered Software is free of defects, merchantable, fit for a * particular purpose or non-infringing. The entire risk as to the * quality and performance of the Covered Software is with You. * Should any Covered Software prove defective in any respect, You * (not any Contributor) assume the cost of any necessary servicing, * repair, or correction. This disclaimer of warranty constitutes an * essential part of this License. No use of any Covered Software is * authorized under this License except under this disclaimer. * * * Limitation of Liability * -------------------------- * * Under no circumstances and under no legal theory, whether tort * (including negligence), contract, or otherwise, shall any * Contributor, or anyone who distributes Covered Software as * permitted above, be liable to You for any direct, indirect, * special, incidental, or consequential damages of any character * including, without limitation, damages for lost profits, loss of * goodwill, work stoppage, computer failure or malfunction, or any * and all other commercial damages or losses, even if such party * shall have been informed of the possibility of such damages. This * limitation of liability shall not apply to liability for death or * personal injury resulting from such party's negligence to the * extent applicable law prohibits such limitation. Some * jurisdictions do not allow the exclusion or limitation of * incidental or consequential damages, so this exclusion and * limitation may not apply to You. * * 8. Litigation \u00a4 Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims. 9. Miscellaneous \u00a4 This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor. 10. Versions of the License \u00a4 10.1. New Versions Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number. 10.2. Effect of New Versions You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward. 10.3. Modified Versions If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License). 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached. Exhibit A - Source Code Form License Notice \u00a4 This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership. Exhibit B - \"Incompatible With Secondary Licenses\" Notice \u00a4 This Source Code Form is \"Incompatible With Secondary Licenses\", as defined by the Mozilla Public License, v. 2.0.","title":"License"},{"location":"license/#mozilla-public-license-version-20","text":"Copyright (c) 2021, Capgemini Invent IDE All rights reserved.","title":"Mozilla Public License Version 2.0"},{"location":"license/#1-definitions","text":"1.1. \"Contributor\" means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software. 1.2. \"Contributor Version\" means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor's Contribution. 1.3. \"Contribution\" means Covered Software of a particular Contributor. 1.4. \"Covered Software\" means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof. 1.5. \"Incompatible With Secondary Licenses\" means (a) that the initial Contributor has attached the notice described in Exhibit B to the Covered Software; or (b) that the Covered Software was made available under the terms of version 1.1 or earlier of the License, but not also under the terms of a Secondary License. 1.6. \"Executable Form\" means any form of the work other than Source Code Form. 1.7. \"Larger Work\" means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software. 1.8. \"License\" means this document. 1.9. \"Licensable\" means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License. 1.10. \"Modifications\" means any of the following: (a) any file in Source Code Form that results from an addition to, deletion from, or modification of the contents of Covered Software; or (b) any new file in Source Code Form that contains any Covered Software. 1.11. \"Patent Claims\" of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version. 1.12. \"Secondary License\" means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses. 1.13. \"Source Code Form\" means the form of the work preferred for making modifications. 1.14. \"You\" (or \"Your\") means an individual or a legal entity exercising rights under this License. For legal entities, \"You\" includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, \"control\" means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.","title":"1. Definitions"},{"location":"license/#2-license-grants-and-conditions","text":"2.1. Grants Each Contributor hereby grants You a world-wide, royalty-free, non-exclusive license: (a) under intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and (b) under Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version. 2.2. Effective Date The licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution. 2.3. Limitations on Grant Scope The licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor: (a) for any code that a Contributor has removed from Covered Software; or (b) for infringements caused by: (i) Your and any other third party's modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or (c) under Patent Claims infringed by Covered Software in the absence of its Contributions. This License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4). 2.4. Subsequent Licenses No Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3). 2.5. Representation Each Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License. 2.6. Fair Use This License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents. 2.7. Conditions Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.","title":"2. License Grants and Conditions"},{"location":"license/#3-responsibilities","text":"3.1. Distribution of Source Form All distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients' rights in the Source Code Form. 3.2. Distribution of Executable Form If You distribute Covered Software in Executable Form then: (a) such Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and (b) You may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients' rights in the Source Code Form under this License. 3.3. Distribution of a Larger Work You may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s). 3.4. Notices You may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies. 3.5. Application of Additional Terms You may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.","title":"3. Responsibilities"},{"location":"license/#4-inability-to-comply-due-to-statute-or-regulation","text":"If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.","title":"4. Inability to Comply Due to Statute or Regulation"},{"location":"license/#5-termination","text":"5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice. 5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate. 5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination. * Disclaimer of Warranty * ------------------------- * * Covered Software is provided under this License on an \"as is\" * basis, without warranty of any kind, either expressed, implied, or * statutory, including, without limitation, warranties that the * Covered Software is free of defects, merchantable, fit for a * particular purpose or non-infringing. The entire risk as to the * quality and performance of the Covered Software is with You. * Should any Covered Software prove defective in any respect, You * (not any Contributor) assume the cost of any necessary servicing, * repair, or correction. This disclaimer of warranty constitutes an * essential part of this License. No use of any Covered Software is * authorized under this License except under this disclaimer. * * * Limitation of Liability * -------------------------- * * Under no circumstances and under no legal theory, whether tort * (including negligence), contract, or otherwise, shall any * Contributor, or anyone who distributes Covered Software as * permitted above, be liable to You for any direct, indirect, * special, incidental, or consequential damages of any character * including, without limitation, damages for lost profits, loss of * goodwill, work stoppage, computer failure or malfunction, or any * and all other commercial damages or losses, even if such party * shall have been informed of the possibility of such damages. This * limitation of liability shall not apply to liability for death or * personal injury resulting from such party's negligence to the * extent applicable law prohibits such limitation. Some * jurisdictions do not allow the exclusion or limitation of * incidental or consequential damages, so this exclusion and * limitation may not apply to You. * *","title":"5. Termination"},{"location":"license/#8-litigation","text":"Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party's ability to bring cross-claims or counter-claims.","title":"8. Litigation"},{"location":"license/#9-miscellaneous","text":"This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.","title":"9. Miscellaneous"},{"location":"license/#10-versions-of-the-license","text":"10.1. New Versions Mozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number. 10.2. Effect of New Versions You may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward. 10.3. Modified Versions If you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License). 10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses If You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.","title":"10. Versions of the License"},{"location":"license/#exhibit-a-source-code-form-license-notice","text":"This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. If it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice. You may add additional accurate notices of copyright ownership.","title":"Exhibit A - Source Code Form License Notice"},{"location":"license/#exhibit-b-incompatible-with-secondary-licenses-notice","text":"This Source Code Form is \"Incompatible With Secondary Licenses\", as defined by the Mozilla Public License, v. 2.0.","title":"Exhibit B - \"Incompatible With Secondary Licenses\" Notice"},{"location":"reference/CharacterGenerator/","text":"Creating Characters \u00a4 Generating a Character from a random method is easy. Simply initialise the CharacterGenerator class and choose a character to generate. !!! Note: WordGenerator can automatically setup a CharacterGenerator class (if required), removing the need for you to create individual characters yourself. from inked import CharacterGenerator char_factory = CharacterGenerator () char = char_factory [ \"a\" ] char . image . show () char . save ( \"output.png\" ) CharacterGenerator Parameters \u00a4 from inked import CharacterGenerator char_factory = CharacterGenerator ( warehouses = [ 'fonts' , 'block' ]) warehouses:List[str] = ['fonts', 'block'] - Choose where character images are randomly generated from (default's both on). ['fonts'] : select character base image from a random Google font (alphanumeric, spaces and special characters). ['block'] : select character base image from a random handwritten image (alphanumeric and spaces only). !!! Note: Currently only supports single character strings as input. For example, you are unable to specify a character using encoding such as ASCI. from inked import CharacterGenerator , Augmentor char_factory = CharacterGenerator ( augmentor = Augmentor ()) augmentor: Optional[Augmentor] = None - Determines if the character image will be augmented. None : (Default) No image augmentations will be used. Augmentor : Specify the augmentor and settings. See Augmentor . from inked import CharacterGenerator char_factory = CharacterGenerator ( warehouses = [ 'block' ], block_dataset_size = 'sml' ) block_dataset_size:str = 'sml' - determines which block warehouse to use (and downloads it if not already available). sml : (Default) Max 300 images for each alphanumeric character. med : Max 3000 images for each alphanumeric character. lrg : All images available for each alphanumeric character.","title":"CharacterGenerator"},{"location":"reference/CharacterGenerator/#creating-characters","text":"Generating a Character from a random method is easy. Simply initialise the CharacterGenerator class and choose a character to generate. !!! Note: WordGenerator can automatically setup a CharacterGenerator class (if required), removing the need for you to create individual characters yourself. from inked import CharacterGenerator char_factory = CharacterGenerator () char = char_factory [ \"a\" ] char . image . show () char . save ( \"output.png\" )","title":"Creating Characters"},{"location":"reference/CharacterGenerator/#charactergenerator-parameters","text":"from inked import CharacterGenerator char_factory = CharacterGenerator ( warehouses = [ 'fonts' , 'block' ]) warehouses:List[str] = ['fonts', 'block'] - Choose where character images are randomly generated from (default's both on). ['fonts'] : select character base image from a random Google font (alphanumeric, spaces and special characters). ['block'] : select character base image from a random handwritten image (alphanumeric and spaces only). !!! Note: Currently only supports single character strings as input. For example, you are unable to specify a character using encoding such as ASCI. from inked import CharacterGenerator , Augmentor char_factory = CharacterGenerator ( augmentor = Augmentor ()) augmentor: Optional[Augmentor] = None - Determines if the character image will be augmented. None : (Default) No image augmentations will be used. Augmentor : Specify the augmentor and settings. See Augmentor . from inked import CharacterGenerator char_factory = CharacterGenerator ( warehouses = [ 'block' ], block_dataset_size = 'sml' ) block_dataset_size:str = 'sml' - determines which block warehouse to use (and downloads it if not already available). sml : (Default) Max 300 images for each alphanumeric character. med : Max 3000 images for each alphanumeric character. lrg : All images available for each alphanumeric character.","title":"CharacterGenerator Parameters"},{"location":"reference/Tutorial-User_Guide/","text":"Basic Data Generation \u00a4 Run a basic \"Hello World\" string creation with character and word augmentations. from inked import WordGenerator factory = WordGenerator ( augmentor = True , warehouses = [ \"fonts\" , \"block\" ], block_dataset_size = \"sml\" ) word = factory . generate ( \"Hello World\" , augment_word = True ) word . save ( \"Hello_World.png\" ) Generating Images from a list of strings \u00a4 You can quickly generate a random image with full augments from a given string with the simple setup below, saving images to disc with the metadata containing the text label, augmentations and their severity. import numpy as np from tqdm import tqdm from inked import WordGenerator , FixedSpacer np . random . seed ( 42 ) def generate_list_of_word_images ( words_list : list ): factory = WordGenerator ( augmentor = True , warehouses = [ \"fonts\" , \"block\" ], block_dataset_size = \"sml\" ) for word_string in tqdm ( words_list ): word = factory . generate ( word_string , augment_word = True , spacer = FixedSpacer ( 0 )) word . save ( f \" { word_string } .png\" ) if __name__ == \"__main__\" : generate_list_of_word_images ( words_list = [ 'Hello' , 'World' , 'Hello World' ]) Advanced Data Generation \u00a4 The below setup allows you to save images to straight to LMDB format - saving IO write time when generating and reading in millions of images and their labels. We've also added in a word generator to automatically select words to generate, along with manually specifying an Augmentor (see Augmentor to learn more about customising augmentations). import numpy as np from pathlib import Path from tqdm import tqdm from inked import WordGenerator , CharDict , RandomSpacer , Augmentor from inked.lmdb_ctx import LMDBMaker np . random . seed ( 42 ) def random_word_images_to_lmdb ( n_words : int , lmdb_folder : str ): augmentor = Augmentor () factory = WordGenerator ( augmentor = augmentor , warehouses = [ \"cursive\" , \"fonts\" , \"block\" ], block_dataset_size = \"lrg\" ) char_dict = CharDict ( distribution = { \"english_words\" : 0.3 , \"google_words\" : 0.6 , \"additional_words\" : 0.1 ,}, possible_chars = factory . chargen . possible , ) # Generate a random word and save them to LMDB with LMDBMaker ( Path ( lmdb_folder )) as lmdb : for _ in tqdm ( range ( n_words )): rand_word = char_dict [ char_dict . random_char ] word = factory . generate ( rand_word , augment_word = True , spacer = RandomSpacer ( _min = 0 , _max = 20 ) ) lmdb . append ( word . text , word . image . encode ()) if __name__ == \"__main__\" : random_word_images_to_lmdb ( n_words = 1000 , lmdb_folder = \"LMDB\" )","title":"Tutorial - User Guide"},{"location":"reference/Tutorial-User_Guide/#basic-data-generation","text":"Run a basic \"Hello World\" string creation with character and word augmentations. from inked import WordGenerator factory = WordGenerator ( augmentor = True , warehouses = [ \"fonts\" , \"block\" ], block_dataset_size = \"sml\" ) word = factory . generate ( \"Hello World\" , augment_word = True ) word . save ( \"Hello_World.png\" )","title":"Basic Data Generation"},{"location":"reference/Tutorial-User_Guide/#generating-images-from-a-list-of-strings","text":"You can quickly generate a random image with full augments from a given string with the simple setup below, saving images to disc with the metadata containing the text label, augmentations and their severity. import numpy as np from tqdm import tqdm from inked import WordGenerator , FixedSpacer np . random . seed ( 42 ) def generate_list_of_word_images ( words_list : list ): factory = WordGenerator ( augmentor = True , warehouses = [ \"fonts\" , \"block\" ], block_dataset_size = \"sml\" ) for word_string in tqdm ( words_list ): word = factory . generate ( word_string , augment_word = True , spacer = FixedSpacer ( 0 )) word . save ( f \" { word_string } .png\" ) if __name__ == \"__main__\" : generate_list_of_word_images ( words_list = [ 'Hello' , 'World' , 'Hello World' ])","title":"Generating Images from a list of strings"},{"location":"reference/Tutorial-User_Guide/#advanced-data-generation","text":"The below setup allows you to save images to straight to LMDB format - saving IO write time when generating and reading in millions of images and their labels. We've also added in a word generator to automatically select words to generate, along with manually specifying an Augmentor (see Augmentor to learn more about customising augmentations). import numpy as np from pathlib import Path from tqdm import tqdm from inked import WordGenerator , CharDict , RandomSpacer , Augmentor from inked.lmdb_ctx import LMDBMaker np . random . seed ( 42 ) def random_word_images_to_lmdb ( n_words : int , lmdb_folder : str ): augmentor = Augmentor () factory = WordGenerator ( augmentor = augmentor , warehouses = [ \"cursive\" , \"fonts\" , \"block\" ], block_dataset_size = \"lrg\" ) char_dict = CharDict ( distribution = { \"english_words\" : 0.3 , \"google_words\" : 0.6 , \"additional_words\" : 0.1 ,}, possible_chars = factory . chargen . possible , ) # Generate a random word and save them to LMDB with LMDBMaker ( Path ( lmdb_folder )) as lmdb : for _ in tqdm ( range ( n_words )): rand_word = char_dict [ char_dict . random_char ] word = factory . generate ( rand_word , augment_word = True , spacer = RandomSpacer ( _min = 0 , _max = 20 ) ) lmdb . append ( word . text , word . image . encode ()) if __name__ == \"__main__\" : random_word_images_to_lmdb ( n_words = 1000 , lmdb_folder = \"LMDB\" )","title":"Advanced Data Generation"},{"location":"reference/WordGenerator/","text":"Creating Words with WordGenerator \u00a4 Generating a Word image from a string is easy. Simply initialise the WordGenerator class and choose a string to generate. from src.inked import WordGenerator factory = WordGenerator () word = factory . generate ( \"Hello World\" ) # display or save out the image word . image . show () word . save ( \"output.png\" ) Under the hood, this is actually initializing a CharacterGenerator and generating individual character s, adding them together to create the final Word object. WordGenerator Parameters \u00a4 from src.inked import WordGenerator factory = WordGenerator ( warehouses = [ 'fonts' , 'block' ]) warehouses:List[str] = ['fonts', 'block', 'cursive'] - Choose where character images are randomly generated from (default's all). ['fonts'] : select individual character images from a random Google font (alphanumeric, spaces and special characters) which is then added/concatinated together with others to form the word. ['block'] : select individual character images from a handwritten image (alphanumeric and spaces only) which is then added/concatinated together with others to form the word. ['cursive'] : constructs the entire word as a single string using a Neural Network (currently alphanumeric only). !!! Note: cursive requires a word length of 3+ characters and does not support character level augmentations as the entire string is generated at once. from src.inked import WordGenerator factory = WordGenerator ( augmentor = True ) augmentor:Union[Bool, Augmentor()] = False - Sets the augmentor and determines if character level augmentations will be performed. False : (Default) No image augmentations will be used. True : Enables the default Augmentor and applies a random selection of augments on each character image (separately). Augmentor : Specify your own augmentor and settings. See Augmentor . WordGenerator Methods \u00a4 from src.inked import WordGenerator factory = WordGenerator () # generate words using block and fonts warehouses word = factory . generate ( \"Hello World\" ) generate(text) : generates the given text as individual characters, before added them together to complete the word image. Parameters \u00a4 text: str : (Required) the text string to generate. augment_word: bool : Enables word level augmentations (Augmentor is required to be set). spacer: Union[FixedSpacer, RandomSpacer] : The amount of space applied to each character when forming a word (defaults to FixedSpacer(0) ) See spacer . # generate words using the cursive neural network cursive_word = factory . generate_cursive ( \"Hello World\" ) generate_cursive(text) : generates a full word image from a neural network (requires length of text to be > 3) Parameters \u00a4 text: str : (Required) the text string to generate. augment_word: bool : Enables word level augmentations (Augmentor is required to be set). !!! Note: generate_cursive is not able to be used with character level augmentations.","title":"WordGenerator"},{"location":"reference/WordGenerator/#creating-words-with-wordgenerator","text":"Generating a Word image from a string is easy. Simply initialise the WordGenerator class and choose a string to generate. from src.inked import WordGenerator factory = WordGenerator () word = factory . generate ( \"Hello World\" ) # display or save out the image word . image . show () word . save ( \"output.png\" ) Under the hood, this is actually initializing a CharacterGenerator and generating individual character s, adding them together to create the final Word object.","title":"Creating Words with WordGenerator"},{"location":"reference/WordGenerator/#wordgenerator-parameters","text":"from src.inked import WordGenerator factory = WordGenerator ( warehouses = [ 'fonts' , 'block' ]) warehouses:List[str] = ['fonts', 'block', 'cursive'] - Choose where character images are randomly generated from (default's all). ['fonts'] : select individual character images from a random Google font (alphanumeric, spaces and special characters) which is then added/concatinated together with others to form the word. ['block'] : select individual character images from a handwritten image (alphanumeric and spaces only) which is then added/concatinated together with others to form the word. ['cursive'] : constructs the entire word as a single string using a Neural Network (currently alphanumeric only). !!! Note: cursive requires a word length of 3+ characters and does not support character level augmentations as the entire string is generated at once. from src.inked import WordGenerator factory = WordGenerator ( augmentor = True ) augmentor:Union[Bool, Augmentor()] = False - Sets the augmentor and determines if character level augmentations will be performed. False : (Default) No image augmentations will be used. True : Enables the default Augmentor and applies a random selection of augments on each character image (separately). Augmentor : Specify your own augmentor and settings. See Augmentor .","title":"WordGenerator Parameters"},{"location":"reference/WordGenerator/#wordgenerator-methods","text":"from src.inked import WordGenerator factory = WordGenerator () # generate words using block and fonts warehouses word = factory . generate ( \"Hello World\" ) generate(text) : generates the given text as individual characters, before added them together to complete the word image.","title":"WordGenerator Methods"},{"location":"reference/WordGenerator/#parameters","text":"text: str : (Required) the text string to generate. augment_word: bool : Enables word level augmentations (Augmentor is required to be set). spacer: Union[FixedSpacer, RandomSpacer] : The amount of space applied to each character when forming a word (defaults to FixedSpacer(0) ) See spacer . # generate words using the cursive neural network cursive_word = factory . generate_cursive ( \"Hello World\" ) generate_cursive(text) : generates a full word image from a neural network (requires length of text to be > 3)","title":"Parameters"},{"location":"reference/WordGenerator/#parameters_1","text":"text: str : (Required) the text string to generate. augment_word: bool : Enables word level augmentations (Augmentor is required to be set). !!! Note: generate_cursive is not able to be used with character level augmentations.","title":"Parameters"},{"location":"reference/augmentor/","text":"Augmentor \u00a4 Used to morph Character and Word objects. Fully Custom Augmentor Setup \u00a4 from inked import Augmentor # specify your own config file config = Path ( 'path/to/json/config/file.json' ) aug = Augmentor ( config = config ) Default config file and settings \u00a4 Copy and save this as a file.json and pass it into the Augmentor() to customise how many augmentations, which augmentations and at what severity is applied (randomly selected between the min/max ranges). [ { \"object\" : \"Character\" , \"min_augments\" : 1 , \"max_augments\" : 99 , \"augments\" : [ { \"name\" : \"rotation\" , \"enabled\" : true , \"min_severity\" : -15 , \"max_severity\" : 15 }, { \"name\" : \"scale_x\" , \"enabled\" : true , \"min_severity\" : 0.9 , \"max_severity\" : 1.1 }, { \"name\" : \"scale_y\" , \"enabled\" : true , \"min_severity\" : 0.9 , \"max_severity\" : 1.1 }, { \"name\" : \"text_fill\" , \"enabled\" : true , \"min_severity\" : [ 0 , 0 , 0 ], \"max_severity\" : [ 255 , 255 , 255 ] }, { \"name\" : \"text_texture\" , \"enabled\" : true , \"min_severity\" : 99 , \"max_severity\" : 99 } ] }, { \"object\" : \"Word\" , \"min_augments\" : 1 , \"max_augments\" : 99 , \"augments\" : [ { \"name\" : \"rotation\" , \"enabled\" : true , \"min_severity\" : -3 , \"max_severity\" : 3 }, { \"name\" : \"xblur\" , \"enabled\" : true , \"min_severity\" : 1 , \"max_severity\" : 2 }, { \"name\" : \"yblur\" , \"enabled\" : true , \"min_severity\" : 1 , \"max_severity\" : 2 }, { \"name\" : \"bg_image\" , \"enabled\" : true , \"min_severity\" : 99 , \"max_severity\" : 99 }, { \"name\" : \"bg_colour\" , \"enabled\" : true , \"min_severity\" : 0.1 , \"max_severity\" : 0.4 }, { \"name\" : \"random_pixel_noise\" , \"enabled\" : true , \"min_severity\" : 0.005 , \"max_severity\" : 0.03 } ] } ] !!! Note: Where min_severity and min_severity == 99 , those augmentations aren't affected by changes to severity. Severity was simply kept for consistancy in method variable handeling. Examples: To keep the background transparent in the final word image, simply set \"enabled\" to false for both bg_image and bg_colour in the word augments. To disable character level augments, and reduce the maximum number of word augments, simply change the min/max_augments for each or set each Character augment to false .","title":"Augmentor"},{"location":"reference/augmentor/#augmentor","text":"Used to morph Character and Word objects.","title":"Augmentor"},{"location":"reference/augmentor/#fully-custom-augmentor-setup","text":"from inked import Augmentor # specify your own config file config = Path ( 'path/to/json/config/file.json' ) aug = Augmentor ( config = config )","title":"Fully Custom Augmentor Setup"},{"location":"reference/augmentor/#default-config-file-and-settings","text":"Copy and save this as a file.json and pass it into the Augmentor() to customise how many augmentations, which augmentations and at what severity is applied (randomly selected between the min/max ranges). [ { \"object\" : \"Character\" , \"min_augments\" : 1 , \"max_augments\" : 99 , \"augments\" : [ { \"name\" : \"rotation\" , \"enabled\" : true , \"min_severity\" : -15 , \"max_severity\" : 15 }, { \"name\" : \"scale_x\" , \"enabled\" : true , \"min_severity\" : 0.9 , \"max_severity\" : 1.1 }, { \"name\" : \"scale_y\" , \"enabled\" : true , \"min_severity\" : 0.9 , \"max_severity\" : 1.1 }, { \"name\" : \"text_fill\" , \"enabled\" : true , \"min_severity\" : [ 0 , 0 , 0 ], \"max_severity\" : [ 255 , 255 , 255 ] }, { \"name\" : \"text_texture\" , \"enabled\" : true , \"min_severity\" : 99 , \"max_severity\" : 99 } ] }, { \"object\" : \"Word\" , \"min_augments\" : 1 , \"max_augments\" : 99 , \"augments\" : [ { \"name\" : \"rotation\" , \"enabled\" : true , \"min_severity\" : -3 , \"max_severity\" : 3 }, { \"name\" : \"xblur\" , \"enabled\" : true , \"min_severity\" : 1 , \"max_severity\" : 2 }, { \"name\" : \"yblur\" , \"enabled\" : true , \"min_severity\" : 1 , \"max_severity\" : 2 }, { \"name\" : \"bg_image\" , \"enabled\" : true , \"min_severity\" : 99 , \"max_severity\" : 99 }, { \"name\" : \"bg_colour\" , \"enabled\" : true , \"min_severity\" : 0.1 , \"max_severity\" : 0.4 }, { \"name\" : \"random_pixel_noise\" , \"enabled\" : true , \"min_severity\" : 0.005 , \"max_severity\" : 0.03 } ] } ] !!! Note: Where min_severity and min_severity == 99 , those augmentations aren't affected by changes to severity. Severity was simply kept for consistancy in method variable handeling. Examples: To keep the background transparent in the final word image, simply set \"enabled\" to false for both bg_image and bg_colour in the word augments. To disable character level augments, and reduce the maximum number of word augments, simply change the min/max_augments for each or set each Character augment to false .","title":"Default config file and settings"},{"location":"reference/character/","text":"Character Objects \u00a4 Create a Character object by using the CharacterGenerator method __getitem__ . !!! Note: While you are able to create individual characters (outlined below) this is not required to generate word images at it will all be taken care of for you in the WordGenerator class. See WordGenerator for more information and examples. from inked import CharacterGenerator chargen = CharacterGenerator () char = chargen [ \"a\" ] char2 = chargen [ \"b\" ] Character Methods \u00a4 # save char image and all metadata char . save ( 'output.png' ) # adds chars together to create a word object. word = sum ([ char , char2 ]) sum([char, char2]) : Adds (concatinates left to right) two or more Character instances together, returning a Word instance (see Word ). char.save(path) : Will save image to disc and attached all the augmentations and information (including the label or text of the image) as metadata within the saved image. char.augment(augmentor=Augmentor()) : Manually apply augmentations to the character image. Works the same as specifying the Augmentor in CharacterGenerator(). Character Attributes \u00a4 # use PIL to show the image char . image . show () # print what augmentations have been applied to the character image print ( char . metadata ) With the above code, char will have a set of attributes you can inspect to understand what has been done to the image. char.image : PIL.Image.Image of the character plus any augmentations. This image will still have a transparent background. char.metadata : Stores a dict of what augmentations have been done to the image at what severity levels. !!! Note: Character and Word objects are almost identical in methods and attributes. The most notable difference is the augments available to each.","title":"Character"},{"location":"reference/character/#character-objects","text":"Create a Character object by using the CharacterGenerator method __getitem__ . !!! Note: While you are able to create individual characters (outlined below) this is not required to generate word images at it will all be taken care of for you in the WordGenerator class. See WordGenerator for more information and examples. from inked import CharacterGenerator chargen = CharacterGenerator () char = chargen [ \"a\" ] char2 = chargen [ \"b\" ]","title":"Character Objects"},{"location":"reference/character/#character-methods","text":"# save char image and all metadata char . save ( 'output.png' ) # adds chars together to create a word object. word = sum ([ char , char2 ]) sum([char, char2]) : Adds (concatinates left to right) two or more Character instances together, returning a Word instance (see Word ). char.save(path) : Will save image to disc and attached all the augmentations and information (including the label or text of the image) as metadata within the saved image. char.augment(augmentor=Augmentor()) : Manually apply augmentations to the character image. Works the same as specifying the Augmentor in CharacterGenerator().","title":"Character Methods"},{"location":"reference/character/#character-attributes","text":"# use PIL to show the image char . image . show () # print what augmentations have been applied to the character image print ( char . metadata ) With the above code, char will have a set of attributes you can inspect to understand what has been done to the image. char.image : PIL.Image.Image of the character plus any augmentations. This image will still have a transparent background. char.metadata : Stores a dict of what augmentations have been done to the image at what severity levels. !!! Note: Character and Word objects are almost identical in methods and attributes. The most notable difference is the augments available to each.","title":"Character Attributes"},{"location":"reference/spacer/","text":"Spacer \u00a4 Spacers are used by the WordGenerator to place between each character when concatenating them together. from inked.character import FixedSpacer , RandomSpacer FixedSpacer(width = 0) : (Default) Sets the spacing to be 0px for each character concatenation. FixedSpacer(width = 10) : Would add 10px to between each character concatenation. RandomSpacer(0, 10) : Adds a random space with width 0px - 10px between each character. !!! Note: Having a word string with a space in it (ie: \"Hello World\" ) will add a FixedSpacer(30) as the space character (and still apply any additional spacing defined). This can be changed by assigning CharacterGenerator.spacer = FixedSpacer(width=30) after initialisation of either WordGenerator or CharacterGenerator .","title":"Spacer"},{"location":"reference/spacer/#spacer","text":"Spacers are used by the WordGenerator to place between each character when concatenating them together. from inked.character import FixedSpacer , RandomSpacer FixedSpacer(width = 0) : (Default) Sets the spacing to be 0px for each character concatenation. FixedSpacer(width = 10) : Would add 10px to between each character concatenation. RandomSpacer(0, 10) : Adds a random space with width 0px - 10px between each character. !!! Note: Having a word string with a space in it (ie: \"Hello World\" ) will add a FixedSpacer(30) as the space character (and still apply any additional spacing defined). This can be changed by assigning CharacterGenerator.spacer = FixedSpacer(width=30) after initialisation of either WordGenerator or CharacterGenerator .","title":"Spacer"},{"location":"reference/word/","text":"Word Objects \u00a4 The WordGenerator methods generate(text) and generate_cursive(text) return a Word object. from inked import WordGenerator factory = WordGenerator () word = factory . generate ( \"Hello World\" ) Word Methods \u00a4 # save word image and all metadata word . save ( 'output.png' ) word.save(path) : Will save image to disc and attached all the augmentations and information (including the label or text of the image) as metadata within the saved image. word.augment(augmentor=Augmentor()) : Manually apply augmentations to the word image. Works the same as specifying the Augmentor in WordGenerator() and setting word_augment=True with either generate or generate_cursive method. !!! Note: Character and Word objects are almost identical in methods and attributes. The most notable difference is the augments available to each. Word Attributes \u00a4 A given Word Instance will have the following attributes you can inspect and use. With the above code, word will have a set of attributes you can inspect to understand what has been done to the image. These are similar to the Character class. word . image . show () # saves word image with no metadata word . image . save ( \"output.png\" ) word.image : PIL.Image.Image of the word with any augmentations applied. This image will still have a transparent layer (although may be augmented to have a background color/image). !!! Note: It is preferable to use word.save() method (see above) instead of using the Pillow package save. This will ensure the text/label, augmentations and their severity will be saved into the metadata of the file. print ( word . metadata ) word.metadata : Stores a dict of what augmentations have been applied to the image at the character level , and at what severity level. Added to the metadata of the image when using the word.save() method. print ( word . word_metadata ) word.word_metadata : Stores a dict of what augmentations have been applied to the image at the word level , and at what severity level. Added to the metadata of the image when using the word.save() method. !!! Note: word.word_metadata will be an empty dict unless augmentor = True and augment_word = True .","title":"Word"},{"location":"reference/word/#word-objects","text":"The WordGenerator methods generate(text) and generate_cursive(text) return a Word object. from inked import WordGenerator factory = WordGenerator () word = factory . generate ( \"Hello World\" )","title":"Word Objects"},{"location":"reference/word/#word-methods","text":"# save word image and all metadata word . save ( 'output.png' ) word.save(path) : Will save image to disc and attached all the augmentations and information (including the label or text of the image) as metadata within the saved image. word.augment(augmentor=Augmentor()) : Manually apply augmentations to the word image. Works the same as specifying the Augmentor in WordGenerator() and setting word_augment=True with either generate or generate_cursive method. !!! Note: Character and Word objects are almost identical in methods and attributes. The most notable difference is the augments available to each.","title":"Word Methods"},{"location":"reference/word/#word-attributes","text":"A given Word Instance will have the following attributes you can inspect and use. With the above code, word will have a set of attributes you can inspect to understand what has been done to the image. These are similar to the Character class. word . image . show () # saves word image with no metadata word . image . save ( \"output.png\" ) word.image : PIL.Image.Image of the word with any augmentations applied. This image will still have a transparent layer (although may be augmented to have a background color/image). !!! Note: It is preferable to use word.save() method (see above) instead of using the Pillow package save. This will ensure the text/label, augmentations and their severity will be saved into the metadata of the file. print ( word . metadata ) word.metadata : Stores a dict of what augmentations have been applied to the image at the character level , and at what severity level. Added to the metadata of the image when using the word.save() method. print ( word . word_metadata ) word.word_metadata : Stores a dict of what augmentations have been applied to the image at the word level , and at what severity level. Added to the metadata of the image when using the word.save() method. !!! Note: word.word_metadata will be an empty dict unless augmentor = True and augment_word = True .","title":"Word Attributes"}]}